
#include "axi.h"

int FPGA_CONVERT_DONE=FALSE;

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
pthread_cond_t 	mCondFpgaStartStep_1=PTHREAD_COND_INITIALIZER;
pthread_mutex_t mMutexFpga=PTHREAD_MUTEX_INITIALIZER;

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
volatile int ProcessImageData=0;
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/


/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/





/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/

/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
void *fpga_cvt_server(void* _pdata)
{
	int FRAME_IDX=0;
	int init_stat;
	/*-----------------------------------*/
	while(IsRun()){
		init_stat=init_fpga();
		if(init_stat==TRUE){
			break;
		}else{
			sleep(1);
		}

	}
	/*-----------------------------------*/
	while(IsRun()){
			if(Wait4StartFpgaCircle()==SUCCESS){

				FRAME_IDX=0;
				sendImageStart();
				PRINTF_DBG("FPGA>>Start FPGA Circle \n");
			}else{
				//PRINTF_DBG("axi wait error: step 1 \n");
				pthread_exit(NULL);
			}
		/*-----------------------------------*/
			//PRINTF_DBG("FPGA>>2 Start FPGA step 1\n");

			int First_Mode=0;

			if(WM_ORG_IMG==(GetFpgaCircleWorkMode()&WM_ORG_IMG)){
				First_Mode=FPGA_WORK_MODE_DATA_ZERO;
			}else if(WM_DIFF_IMG==(GetFpgaCircleWorkMode()&WM_DIFF_IMG)){
				First_Mode=FPGA_WORK_MODE_DATA_AVG;
			}else{

			}


			outside_first(First_Mode);


			for(;IsFpgaCircleRunning() && IsRun();FRAME_IDX++){

				outside_second_sync(FRAME_IDX);

				//send_image_2_queue(FRAME_IDX,AXI_MAP_FRAME(0));
			}
		/*-----------------------------------*/
				sendImageStop();
				StopFpgaCircleRunning();
		/*-----------------------------------*/
	}


	ExitFpgaThread();

}
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
pthread_t init_fpga_cvt_server(void *_data)
{
	pthread_t _thread_tid;
	if( pthread_create(&_thread_tid, NULL, fpga_cvt_server, _data) ){
			PRINTF_DBG(" Create print_thread1 thread error!\n");
			exit(0);
	}
 return _thread_tid;
}
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
void *axi_rcv_server(void* _pdata)
{
	while(IsRun()){

		if(ProcessImageData==RCV_IMAGE_BY_SELF){

				MESSAGE msg=rcv_queue_img_buff();

				if(msg.message_type==ENOMSG){
					usleep(10);
				}else{

					CMD_CTRL *img_data=msg._data;

					IplImageU* imgU=(IplImageU*)img_data;
					int ch=imgU->IpAddrChannel[0];

					PRINTF_DBG("inner rcv a image Channel:%d\n",ch);

					ReleaseCmdCtrl(&img_data);
				}




		}else{
			sleep(1);
		}

	}

	pthread_exit(NULL);

}
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
pthread_t rcv_image_buff_axi_server(void *_data)
{
	pthread_t _thread_tid;
	if( pthread_create(&_thread_tid, NULL, axi_rcv_server, _data) ){
			PRINTF_DBG(" Create print_thread1 thread error!\n");
			exit(0);
	}
 return _thread_tid;
}
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
void* tcp_data_transfer_image(void *_data)
{

	int *_clientfd_p=(int*)_data;
	int sock_server=*_clientfd_p;
	int socket_status=TRUE;
	//const int time_us=0;
	time_t seconds_old = time(NULL);
	const int time_step=5;
	//struct timeval startTime,endTime;
	//float Timeuse;
	mem_free_clr(&_data);

	EnterTcpTransImageThread();

	/*-----------------------------------*/
		while(IsTcpTransImageRun() && socket_status){

									MESSAGE msg=rcv_queue_img_buff();

									CMD_CTRL *img_data=msg._data;

									if(msg.message_type==ENOMSG){
											time_t seconds_new = time(NULL);
											if(seconds_new-seconds_old>time_step){
												 socket_status=SendHeartbeatCmd(sock_server);
												 seconds_old=time(NULL);
											}
											sleep_1ms();
									}else if(msg.message_type==EIDRM){
											break;
									}else  if(msg.message_type==msgTypeImage()){
										socket_status=socket_write_1_cmd_release(sock_server,img_data);
									}else{
											DEBUG_PRINT("message queue: message_type error\n");
									}

					}
	/*-----------------------------------*/
		close(sock_server);
		ExitTcpTransImageThread();

}
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
pthread_t tcp_image_buff_axi_server(void *_data)
{
	pthread_t _thread_tid;

	TCP_SERVER* tcp_server_data=mem_malloc(sizeof(TCP_SERVER));
		 	 	 	 tcp_server_data->port=TCP_PORT_VIDEO_TRANS;
		 	 	 	 tcp_server_data->pfunClient=tcp_data_transfer_image;

	if( pthread_create(&_thread_tid, NULL, tcp_server, tcp_server_data) ){
			PRINTF_DBG(" Create print_thread1 thread error!\n");
			exit(0);
	}

	return _thread_tid;
}
/*-----------------------------------*/
/**
 *
 */
/*-----------------------------------*/
