/*
 * flame_monitor.c
 *
 *  Created on: 2020年3月17日
 *      Author: yjkj909
 */

#include "flame_monitor.h"

#ifndef FALSE
#define FALSE 0
#endif

#ifndef TRUE
#define TRUE 1
#endif

static int flame_monitor_flag = FALSE;  //是否需要火焰检测
static double threshold_area = 0.5;  //火焰面积阈值
static double threshold_difference = 0.5;  //火焰差分阈值
static int i = 0;  //自有火焰起的计数
static double last_flame = 0;  //上一次火焰面积
static double current_flame = 0;  //本次火焰面积
static int igniter_status = FALSE;  //点火器是否处于点火状态
static int fire_on = FALSE;  //是否需要点火操作
static int fire_off = FALSE;  //是否需要灭火操作

void init_fire()
{
	i = 0;
	last_flame = 0;
	current_flame = 0;
	igniter_status = FALSE;
	fire_on = FALSE;
	fire_off = FALSE;
}

void set_flame_monitor_flag(int _v)
{
	flame_monitor_flag = _v;
}

int get_flame_monitor_flag()
{
	return flame_monitor_flag;
}

void set_thresholde_area(double _v)
{
	threshold_area = _v;
}

double get_thresholde_area()
{
	return threshold_area;
}

void set_thresholde_difference(double _v)
{
	threshold_difference = _v;
}

double get_thresholde_difference()
{
	return threshold_difference;
}

void set_last_flame(double _v)
{
	last_flame = _v;
}

double get_last_flame()
{
	return last_flame;
}

void set_current_flame(double _v)
{
	current_flame = _v;
}

double get_current_flame()
{
	return current_flame;
}

void set_igniter_status(int _v)
{
	igniter_status = _v;
}

int get_igniter_status()
{
	return igniter_status;
}

void set_fire_on(int _v)
{
	fire_on = _v;
}

int get_fire_on()
{
	return fire_on;
}

void set_fire_off(int _v)
{
	fire_off = _v;
}

int get_fire_off()
{
	return fire_off;
}
